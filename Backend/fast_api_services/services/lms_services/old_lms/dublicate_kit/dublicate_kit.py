import requests
import json
import re
import time

def get_token_from_file(user_id, token_key, file_path="../../lms_auth.json"):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ JSON –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–ª—é—á–∞.
    """
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            data = json.load(f)
            user_data = data.get("users", {}).get(str(user_id), {})
            token_data = user_data.get(token_key, {})
            return token_data.get("token", None)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
        return None

def get_new_token(user_id):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞.
    """
    print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...")
    from services.lms_services.utils.auth.login_and_get_token import get_new_code  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à –º–µ—Ç–æ–¥
    get_new_code(user_id)  # –ü–µ—Ä–µ–¥–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    time.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã —Ç–æ–∫–µ–Ω —É—Å–ø–µ–ª –æ–±–Ω–æ–≤–∏—Ç—å—Å—è

def extract_id_from_url(url):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –∏–∑ URL.
    """
    match = re.search(r'/groups/(\d+)', url)
    return match.group(1) if match else None

def fetch_lessons_by_type(user_id, token_key, group_url, lesson_type=4):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞
    token = get_token_from_file(user_id, token_key)

    if not token:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∏–∑ URL
    group_id = extract_id_from_url(group_url)

    if not group_id:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –≥—Ä—É–ø–ø—ã –∏–∑ URL.")
        return

    # URL API —Å –Ω–æ–º–µ—Ä–æ–º –Ω–∞–±–æ—Ä–∞
    url = f'https://api.mosdigitals.ru/groups/{group_id}'

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏, –≤–∫–ª—é—á–∞—è —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ API
        response = requests.get(url, headers=headers)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å
        if response.status_code == 200:
            data = response.json()

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –º–æ–¥—É–ª—é –∏ –∫–∞–∂–¥–æ–º—É —É—Ä–æ–∫—É –≤–Ω—É—Ç—Ä–∏ –º–æ–¥—É–ª—è
            for module in data.get("data", {}).get("modules", []):
                for lesson in module.get("lessons", []):
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Ä–æ–∫–∏ –ø–æ lessonType
                    if lesson.get("lessonType") == lesson_type:
                        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è PATCH-–∑–∞–ø—Ä–æ—Å–∞
                        lesson_id = lesson["id"]
                        lesson_data = {
                            "name": lesson.get("name", ""),
                            "description": "<p>–ö–æ–ª–ª–µ–≥–∏, —Å–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –∏ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –ª–µ–∫—Ü–∏–∏, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ üíú</p><p><a target=\"_blank\" href=\"https://forms.yandex.ru/cloud/-*************/\">https://forms.yandex.ru/cloud/-*************/</a></p>",
                            "lessonType": lesson.get("lessonType"),
                            "lessonData": {
                                "type": lesson.get("lessonData", {}).get("type", ""),
                                "duration": lesson.get("lessonData", {}).get("duration", 0),
                                "date": None,  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º date
                                "teachers": lesson.get("lessonData", {}).get("teachers", ""),
                                "url": None,  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º url
                                "videoCode": None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º videoCode
                            }
                        }

                        # URL –¥–ª—è PATCH-–∑–∞–ø—Ä–æ—Å–∞
                        patch_url = f'https://api.mosdigitals.ru/lessons/{lesson_id}'

                        # –í—ã–ø–æ–ª–Ω—è–µ–º PATCH –∑–∞–ø—Ä–æ—Å
                        patch_response = requests.patch(patch_url, headers=headers, json=lesson_data)

                        if patch_response.status_code == 200:
                            print(f"–£—Ä–æ–∫ {lesson_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
                        else:
                            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞ {lesson_id}: {patch_response.status_code}, {patch_response.text}")

        elif response.status_code == 401:
            print("–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π. –ü—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω...")
            get_new_token(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω

            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞ —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
            token = get_token_from_file(user_id, token_key)  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
            headers['Authorization'] = f'Bearer {token}'

            # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            response = requests.get(url, headers=headers)

            if response.status_code == 200:
                data = response.json()
                for module in data.get("data", {}).get("modules", []):
                    for lesson in module.get("lessons", []):
                        if lesson.get("lessonType") == lesson_type:
                            lesson_id = lesson["id"]
                            lesson_data = {
                                "name": lesson.get("name", ""),
                                "description": "<p>–ö–æ–ª–ª–µ–≥–∏, —Å–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –∏ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –ª–µ–∫—Ü–∏–∏, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ üíú</p><p><a target=\"_blank\" href=\"https://forms.yandex.ru/cloud/-*************/\">https://forms.yandex.ru/cloud/-*************/</a></p>",
                                "lessonType": lesson.get("lessonType"),
                                "lessonData": {
                                    "type": lesson.get("lessonData", {}).get("type", ""),
                                    "duration": lesson.get("lessonData", {}).get("duration", 0),
                                    "date": None,
                                    "teachers": lesson.get("lessonData", {}).get("teachers", ""),
                                    "url": None,
                                    "videoCode": None
                                }
                            }
                            patch_url = f'https://api.mosdigitals.ru/lessons/{lesson_id}'
                            patch_response = requests.patch(patch_url, headers=headers, json=lesson_data)

                            if patch_response.status_code == 200:
                                print(f"–£—Ä–æ–∫ {lesson_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
                            else:
                                print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞ {lesson_id}: {patch_response.status_code}, {patch_response.text}")
            else:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}, {response.text}")

        else:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}, {response.text}")

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

def process_courses(user_id, token_key, urls, clean_after_duplicate=False):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ URL-–∞–¥—Ä–µ—Å–æ–≤ –∫—É—Ä—Å–æ–≤, –¥—É–±–ª–∏—Ä—É—è –∏ –æ—á–∏—â–∞—è –∏—Ö –ø–æ –æ—á–µ—Ä–µ–¥–∏.
    """
    for url in urls:
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É—Ä—Å–∞ –ø–æ —Å—Å—ã–ª–∫–µ: {url}")
        duplicate_course(user_id, token_key, url, clean_after_duplicate)

def duplicate_course(user_id, token_key, url, clean_after_duplicate=False):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞
    token = get_token_from_file(user_id, token_key)

    if not token:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫—É—Ä—Å–∞ –∏–∑ URL
    course_id = extract_id_from_url(url)

    if not course_id:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∫—É—Ä—Å–∞ –∏–∑ URL.")
        return

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏, –≤–∫–ª—é—á–∞—è —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }

    # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ
    course_info_url = f'https://api.mosdigitals.ru/groups/{course_id}'
    # URL –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞
    duplicate_url = f'https://api.mosdigitals.ru/groups/{course_id}/duplicate'

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ
        response = requests.get(course_info_url, headers=headers)

        if response.status_code == 200:
            data = response.json()
            original_course_name = data.get("data", {}).get("course", {}).get("name", "")
            original_course_link = f'https://lk.mosdigitals.ru/groups/{course_id}'

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
            duplicate_response = requests.get(duplicate_url, headers=headers)

            if duplicate_response.status_code == 200:
                duplicate_data = duplicate_response.json()
                new_course_name = duplicate_data.get("data", {}).get("courseName", "")
                new_course_id = duplicate_data.get("data", {}).get("id", "")
                invite_token = duplicate_data.get("data", {}).get("inviteToken", "")

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
                new_course_link = f'https://lk.mosdigitals.ru/groups/{new_course_id}'
                invite_link = f'https://lk.mosdigitals.ru/invitation?group={invite_token}'

                red_text = '\033[91m'
                red_border = '\033[91m\033[1m'
                reset = '\033[0m'

                # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å
                print(f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: {original_course_name}')
                print(f'–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {original_course_link}\n')

                print(f'{red_text}–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –î–û–ë–ê–í–¨ –í –ù–ê–ë–û–† –°–°–´–õ–ö–£ –ù–ê –ß–ê–¢ –ò –†–ê–°–ü–ò–°–ê–ù–ò–ï!{reset}')
                print(f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: {new_course_name}')
                print(f'{red_border}{"=" * 40}{reset}')
                print(f'{red_border}–ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: {new_course_link}{reset}')
                print(f'{red_border}–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {invite_link}{reset}')
                print(f'{red_border}{"=" * 40}{reset}')

                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É —É—Ä–æ–∫–æ–≤, –µ—Å–ª–∏ clean_after_duplicate=True
                if clean_after_duplicate:
                    print("–û—á–∏—Å—Ç–∫–∞ —É—Ä–æ–∫–æ–≤ –ø–æ—Å–ª–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è...")
                    fetch_lessons_by_type(user_id, token_key, new_course_link)

            elif duplicate_response.status_code == 400 and "errors.entity.duplicate" in duplicate_response.text:
                print("–ö—É—Ä—Å —É–∂–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—É—Ä—Å—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")

            else:
                print(f"–û—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞: {duplicate_response.status_code}, {duplicate_response.text}")

        elif response.status_code == 401:
            print("–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π. –ü—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω...")
            get_new_token(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω

            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
            token = get_token_from_file(user_id, token_key)  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
            headers['Authorization'] = f'Bearer {token}'

            # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ
            response = requests.get(course_info_url, headers=headers)

            if response.status_code == 200:
                data = response.json()
                original_course_name = data.get("data", {}).get("course", {}).get("name", "")
                original_course_link = f'https://lk.mosdigitals.ru/groups/{course_id}'

                # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
                duplicate_response = requests.get(duplicate_url, headers=headers)

                if duplicate_response.status_code == 200:
                    duplicate_data = duplicate_response.json()
                    new_course_name = duplicate_data.get("data", {}).get("courseName", "")
                    new_course_id = duplicate_data.get("data", {}).get("id", "")
                    invite_token = duplicate_data.get("data", {}).get("inviteToken", "")

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
                    new_course_link = f'https://lk.mosdigitals.ru/groups/{new_course_id}'
                    invite_link = f'https://lk.mosdigitals.ru/invitation?group={invite_token}'


                    red_text = '\033[91m'
                    red_border = '\033[91m\033[1m'
                    reset = '\033[0m'

                    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å
                    print(f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: {original_course_name}')
                    print(f'–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {original_course_link}\n')

                    print(f'{red_text}–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –î–û–ë–ê–í–¨ –í –ù–ê–ë–û–† –°–°–´–õ–ö–£ –ù–ê –ß–ê–¢ –ò –†–ê–°–ü–ò–°–ê–ù–ò–ï!{reset}')
                    print(f'–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: {new_course_name}')
                    print(f'{red_border}{"=" * 40}{reset}')
                    print(f'{red_border}–ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: {new_course_link}{reset}')
                    print(f'{red_border}–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {invite_link}{reset}')
                    print(f'{red_border}{"=" * 40}{reset}')


                    if clean_after_duplicate:
                        print("–û—á–∏—Å—Ç–∫–∞ —É—Ä–æ–∫–æ–≤ –ø–æ—Å–ª–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è...")
                        fetch_lessons_by_type(user_id, token_key, new_course_link)

                elif duplicate_response.status_code == 400 and "errors.entity.duplicate" in duplicate_response.text:
                    print("–ö—É—Ä—Å —É–∂–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—É—Ä—Å—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")

                else:
                    print(f"–û—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞: {duplicate_response.status_code}, {duplicate_response.text}")
            else:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ: {response.status_code}, {response.text}")

        else:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ: {response.status_code}, {response.text}")

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


user_id = '1'
token_key = 'old_lsm_token'
course_urls = ["https://lk.mosdigitals.ru/groups/-*************"]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥–∏
process_courses(user_id, token_key, course_urls, clean_after_duplicate=True)