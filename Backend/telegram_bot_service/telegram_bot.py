import asyncio
import logging
import re

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Router, F
from pymongo import MongoClient
from config import TELEGRAM_API_TOKEN, mongodb_adress
from utils.get_game_data import get_game_data
import aiosqlite
from datetime import datetime


bot = Bot(token=TELEGRAM_API_TOKEN)
dp = Dispatcher()
router = Router()

mongo_client = MongoClient(f"mongodb://{mongodb_adress[0]}:{mongodb_adress[1]}/")
db = mongo_client["schedule"]
dbinfo = mongo_client["info"]
sheets_collection = db["sheets_data"]

logging.basicConfig(level=logging.INFO)

USERS = [99999999999]

async def get_last_update_time():
    last_update_record = dbinfo["schedule_games"].find_one({"name": "last_update"})
    if last_update_record:
        return last_update_record['time']
    return None


def format_update_time(last_update_time):
    now = datetime.now()

    if isinstance(last_update_time, str):
        last_update_time = datetime.fromisoformat(last_update_time)

    # –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
    delta = now - last_update_time
    last_update_time_str = last_update_time.strftime("%H:%M")

    if delta.days == 0:
        return f"–°–µ–≥–æ–¥–Ω—è –≤ {last_update_time_str}"
    elif delta.days == 1:
        return f"–í—á–µ—Ä–∞ –≤ {last_update_time_str}"
    elif delta.days == 2:
        return f"–ü–æ–∑–∞–≤—á–µ—Ä–∞ –≤ {last_update_time_str}"
    elif 3 <= delta.days <= 6:
        return f"{delta.days} –¥–Ω—è –Ω–∞–∑–∞–¥ –≤ {last_update_time_str}"
    elif 7 <= delta.days < 14:
        return f"–ù–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ –≤ {last_update_time_str}"
    else:
        return last_update_time.strftime("%d.%m –≤ %H:%M")


def replace_links_with_word(description: str) -> str:
    return re.sub(r"(https?://[^\s]+)", r"[—Å—Å—ã–ª–∫–∞](\1)", description)

from datetime import datetime

async def delete_expired_ids():
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ game_ids –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect("game_ids.db") as db:
        async with db.execute("SELECT game_id FROM game_ids") as cursor:
            rows = await cursor.fetchall()
            game_ids = [row[0] for row in rows]

    for game_id in game_ids:
        game_data = get_game_data(game_id, sheets_collection)

        if game_data:
            game_date_str = game_data['date']

            game_date_str = re.sub(r'^[–∞-—è—ë]{2}, ', '', game_date_str, flags=re.IGNORECASE)

            try:
                game_date = datetime.strptime(game_date_str, "%d.%m.%y")
            except ValueError as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞—Ç—ã –¥–ª—è ID {game_id}: {e}")
                continue

            if game_date < datetime.now():  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ datetime.now()
                async with aiosqlite.connect("game_ids.db") as db:
                    await db.execute("DELETE FROM game_ids WHERE game_id = ?", (game_id,))
                    await db.commit()
                print(f"–£–¥–∞–ª—ë–Ω ID {game_id} —Å –ø—Ä–æ—à–µ–¥—à–µ–π –¥–∞—Ç–æ–π {game_date_str}")


async def send_message_with_buttons_to_users(message: str, buttons_markup: InlineKeyboardMarkup):
    for user_id in USERS:
        try:
            await bot.send_message(chat_id=user_id, text=message, reply_markup=buttons_markup)
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def notify_users_with_game_data(game_data_list: list):
    last_update_time = await get_last_update_time()
    message = "–ü–æ—Ä–∞ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∏–≥—Ä–∞–º!\n\n"

    if last_update_time:
        formatted_time = format_update_time(last_update_time)
        message = f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {formatted_time}\n\n{message}"

    buttons_markup = InlineKeyboardMarkup(inline_keyboard=[])

    for game_data in game_data_list:
        date = game_data['date']
        stream = game_data['stream']
        button_text = f"{date} - {stream}"
        print(button_text)
        if len(button_text) > 64:
            button_text = button_text[:61] + "..."

        buttons_markup.inline_keyboard.append(
            [InlineKeyboardButton(text=button_text, callback_data=str(game_data['id']))]
        )

    await send_message_with_buttons_to_users(message, buttons_markup)


@router.callback_query(F.data.isdigit())
async def process_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    game_id = int(callback_query.data)

    game_data = get_game_data(game_id, sheets_collection)

    if game_data:
        game_data['description'] = replace_links_with_word(game_data['description'])

        message = (
            f"üìå *–ü–æ—Ç–æ–∫:* {game_data['stream']}\n"
            f"üìåÔ∏è *–¢–µ–º–∞:* {game_data['title']}\n"
            f"üìå *–î–∞—Ç–∞:* {game_data['date']}\n"
            f"üìå *–°–ø–∏–∫–µ—Ä(—ã):* {game_data['speaker']}\n\n"
            f"*–û–ø–∏—Å–∞–Ω–∏–µ:*\n{game_data['description']}\n\n"
            f"[–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é]({game_data['link']})"
        )

        back_button_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")]
        ])

        await bot.edit_message_text(chat_id=user_id, message_id=callback_query.message.message_id, text=message,
                                    reply_markup=back_button_markup, parse_mode="Markdown", disable_web_page_preview=True)
        print(f"Game Data for ID {game_id}: {game_data}")
    else:
        await bot.edit_message_text(chat_id=user_id, message_id=callback_query.message.message_id,
                                    text=f"–î–∞–Ω–Ω—ã–µ –¥–ª—è Game ID {game_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    await callback_query.answer()


async def load_game_ids() -> list:
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    await delete_expired_ids()
    async with aiosqlite.connect("game_ids.db") as db:
        async with db.execute("SELECT game_id FROM game_ids") as cursor:
            rows = await cursor.fetchall()
            return [row[0] for row in rows]

@router.callback_query(F.data == "back")
async def handle_back(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    game_ids = await load_game_ids()
    last_update_time = await get_last_update_time()

    print(last_update_time)

    last_update_time = await get_last_update_time()
    message = "–ü–æ—Ä–∞ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∏–≥—Ä–∞–º!\n\n"

    if last_update_time:
        formatted_time = format_update_time(last_update_time)
        message = f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {formatted_time}\n\n{message}"

    buttons_markup = InlineKeyboardMarkup(inline_keyboard=[])

    for game_id in game_ids:
        game_data = get_game_data(game_id, sheets_collection)
        if game_data:
            date = game_data['date']
            stream = game_data['stream']
            button_text = f"Ô∏èüïπÔ∏è {date} - {stream}"
            buttons_markup.inline_keyboard.append(
                [InlineKeyboardButton(text=button_text, callback_data=str(game_id))]
            )

    if not buttons_markup.inline_keyboard:
        message = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ."

    await bot.edit_message_text(chat_id=user_id, message_id=callback_query.message.message_id, text=message,
                                reply_markup=buttons_markup)

    await callback_query.answer()

async def start_bot():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π!")
    dp.include_router(router)
    await dp.start_polling(bot)



if __name__ == "__main__":
    asyncio.run(start_bot())